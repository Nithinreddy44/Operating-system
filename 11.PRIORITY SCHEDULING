#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESS 10

typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int waiting_time;
    int turnaround_time;
} process_t;

void priority_scheduling(process_t processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    int remaining_time[MAX_PROCESS];
    for (int i = 0; i < n; i++) {
        remaining_time[i] = processes[i].burst_time;
    }

    int completed = 0;
    int current_time = 0;
    int highest_priority_index = 0;
    while (completed != n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && remaining_time[i] > 0 && processes[i].priority > processes[highest_priority_index].priority) {
                highest_priority_index = i;
            }
        }

        remaining_time[highest_priority_index]--;

        if (remaining_time[highest_priority_index] == 0) {
            completed++;
            processes[highest_priority_index].waiting_time = current_time - processes[highest_priority_index].arrival_time - processes[highest_priority_index].burst_time + 1;
            if (processes[highest_priority_index].waiting_time < 0) {
                processes[highest_priority_index].waiting_time = 0;
            }
            processes[highest_priority_index].turnaround_time = current_time - processes[highest_priority_index].arrival_time + 1;

            total_waiting_time += processes[highest_priority_index].waiting_time;
            total_turnaround_time += processes[highest_priority_index].turnaround_time;

            highest_priority_index = 0;
        }

        current_time++;
    }

    printf("PID\tAT\tBT\tPriority\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\n", processes[i].process_id, processes[i].arrival_time, processes[i].burst_time, processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("Average waiting time: %.2f\n", (float) total_waiting_time / n);
    printf("Average turnaround time: %.2f\n", (float) total_turnaround_time / n);
}

int main() {
    int n;
    process_t processes[MAX_PROCESS];

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d%d%d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].process_id = i + 1;
    }

    priority_scheduling(processes, n);

    return 0;
}
OUTPUT:
Enter the number of processes: 5
Enter burst time and priority for process 1: 10 3
Enter burst time and priority for process 2: 5 2
Enter burst time and priority for process 3: 8 1
Enter burst time and priority for process 4: 4 4
Enter burst time and priority for process 5: 7 5

Execution order: 5 4 1 2 3 

Average waiting time: 11.200000
Average turnaround time: 16.800000
